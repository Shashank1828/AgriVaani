// Particles.js Background
document.addEventListener('DOMContentLoaded', function () {
  if (typeof particlesJS !== 'undefined') {
    particlesJS('particles-js', {
      particles: {
        number: { value: 60, density: { enable: true, value_area: 800 } },
        color: { value: "#ffffff" },
        shape: { type: "circle" },
        opacity: { value: 0.5, random: true },
        size: { value: 3, random: true },
        line_linked: { enable: true, distance: 150, color: "#ffffff", opacity: 0.2, width: 1 },
        move: { enable: true, speed: 2, direction: "none", random: true, straight: false, out_mode: "out" }
      },
      interactivity: {
        detect_on: "canvas",
        events: {
          onhover: { enable: true, mode: "repulse" },
          onclick: { enable: true, mode: "push" }
        }
      }
    });
  }
});

// Mic Recognition Logic
const micBtn = document.getElementById('mic-btn');
const userQ = document.getElementById('user-question');
const resText = document.getElementById('response-text');
const loader = document.getElementById('loader');

if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
  micBtn.disabled = true;
  micBtn.textContent = "ЁЯОд рдмреНрд░рд╛рдЙрдЬрд╝рд░ рд╕рдорд░реНрдерд┐рдд рдирд╣реАрдВ";
  micBtn.style.background = "#e53e3e";
}

const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
recognition.lang = 'hi-IN';

micBtn.addEventListener('click', () => {
  resText.textContent = "рд╕реБрди рд░рд╣рд╛ рд╣реВрдБ...";
  micBtn.classList.add('pulse');
  recognition.start();
});

recognition.onresult = (event) => {
  const question = event.results[0][0].transcript;
  userQ.textContent = "ЁЯСитАНЁЯМ╛ рдЖрдкрдиреЗ рдкреВрдЫрд╛: " + question;
  getAIResponse(question);
};

recognition.onerror = (event) => {
  userQ.textContent = "рдЖрд╡рд╛рдЬрд╝ рдкрд╣рдЪрд╛рдирдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛";
  resText.textContent = "рддреНрд░реБрдЯрд┐: " + event.error;
  micBtn.classList.remove('pulse');
  loader.style.display = 'none';
};

recognition.onend = () => {
  micBtn.classList.remove('pulse');
};

async function getAIResponse(question) {
  try {
    loader.style.display = 'block';
    resText.textContent = "рдкреНрд░рд╕рдВрд╕реНрдХрд░рдг...";
    const response = await fetch('http://34.227.143.202/api/message', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message: question })
    });
    const data = await response.json();
    loader.style.display = 'none';
    resText.textContent = data.reply;
    speakHindi(data.reply);
  } catch (err) {
    loader.style.display = 'none';
    resText.textContent = "рд╕рд░реНрд╡рд░ рд╕реЗ рдЬреБрдбрд╝рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐";
  }
}

// тЬЕ Hindi Speech Fix
function speakHindi(text) {
  if ('speechSynthesis' in window) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'hi-IN';

    const voices = speechSynthesis.getVoices();
    const hindiVoice = voices.find(v => v.lang === 'hi-IN' || v.name.toLowerCase().includes('hindi'));

    if (hindiVoice) {
      utterance.voice = hindiVoice;
    } else {
      console.warn("Hindi voice not found. Using default.");
    }

    speechSynthesis.cancel(); // cancel any previous speech
    window.speechSynthesis.speak(utterance);
  }
}

// force load voices
speechSynthesis.onvoiceschanged = () => {
  speechSynthesis.getVoices();
};

// Auth Logic
const userIcon = document.getElementById('user-icon');
const modal = document.getElementById('auth-modal');
const closeBtn = document.getElementById('close-auth');
const loginTab = document.getElementById('login-tab');
const signupTab = document.getElementById('signup-tab');
const loginForm = document.getElementById('login-form');
const signupForm = document.getElementById('signup-form');
const authMsg = document.getElementById('auth-message');

// User Info Modal Elements
const userInfoModal = document.getElementById('user-info-modal');
const closeUserInfo = document.getElementById('close-user-info');
const logoutBtn = document.getElementById('logout-btn');
const userNameDisplay = document.getElementById('user-name-display');
const userMobileDisplay = document.getElementById('user-mobile-display');

// Toggle Login/Signup Modal or User Info
userIcon.addEventListener('click', () => {
  const user = JSON.parse(localStorage.getItem('loggedInUser'));
  if (user) {
  
    userMobileDisplay.textContent = `рдореЛрдмрд╛рдЗрд▓: ${user.mobile}`;
    userInfoModal.classList.remove('hidden');
  } else {
    modal.classList.remove('hidden');
    authMsg.textContent = '';
    loginTab.classList.add('active');
    signupTab.classList.remove('active');
    loginForm.style.display = 'flex';
    signupForm.style.display = 'none';
  }
});

closeBtn.addEventListener('click', () => {
  modal.classList.add('hidden');
  loginForm.reset();
  signupForm.reset();
  authMsg.textContent = '';
});

closeUserInfo.addEventListener('click', () => {
  userInfoModal.classList.add('hidden');
});

logoutBtn.addEventListener('click', () => {
  localStorage.removeItem('loggedInUser');
  userInfoModal.classList.add('hidden');
});

loginTab.addEventListener('click', () => {
  loginTab.classList.add('active');
  signupTab.classList.remove('active');
  loginForm.style.display = 'flex';
  signupForm.style.display = 'none';
  authMsg.textContent = '';
});

signupTab.addEventListener('click', () => {
  signupTab.classList.add('active');
  loginTab.classList.remove('active');
  signupForm.style.display = 'flex';
  loginForm.style.display = 'none';
  authMsg.textContent = '';
});

// Signup Submit
signupForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  const data = {
    name: document.getElementById('signup-name').value,
    area: document.getElementById('signup-area').value,
    country: document.getElementById('signup-country').value,
    state: document.getElementById('signup-state').value,
    mobile: document.getElementById('signup-mobile').value,
    password: document.getElementById('signup-password').value
  };

  try {
    const res = await fetch('http://34.227.143.202/api/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    const result = await res.json();
    authMsg.textContent = result.message;
    authMsg.style.color = result.success ? 'green' : 'red';
    if (result.success) {
      signupForm.reset();
      setTimeout(() => {
        loginTab.click();
        authMsg.textContent = '';
      }, 1000);
    }
  } catch (err) {
    authMsg.textContent = "тЪая╕П рд╕рд░реНрд╡рд░ рддреНрд░реБрдЯрд┐";
    authMsg.style.color = 'red';
  }
});

// Login Submit
loginForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  const data = {
    mobile: document.getElementById('login-mobile').value,
    password: document.getElementById('login-password').value
  };

  try {
    const res = await fetch('http://34.227.143.202/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    const result = await res.json();
    authMsg.textContent = result.message;
    authMsg.style.color = result.success ? 'green' : 'red';
    if (result.success) {
      localStorage.setItem('loggedInUser', JSON.stringify({
        name: result.name || "рдХрд┐рд╕рд╛рди рдорд┐рддреНрд░",
        mobile: data.mobile
      }));
      loginForm.reset();
      setTimeout(() => {
        modal.classList.add('hidden');
        authMsg.textContent = '';
      }, 1000);
    }
  } catch (err) {
    authMsg.textContent = "тЪая╕П рд▓реЙрдЧрд┐рди рдореЗрдВ рддреНрд░реБрдЯрд┐";
    authMsg.style.color = 'red';
  }
});

// ЁЯМжя╕П Weather Feature
const weatherBtn = document.getElementById('weather-btn');
const weatherModal = document.getElementById('weather-modal');
const weatherText = document.getElementById('weather-text');
const weatherClose = document.getElementById('weather-close');

weatherBtn.addEventListener('click', () => {
  weatherText.textContent = "рд╕реНрдерд╛рди рдХреА рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдХреА рдЬрд╛ рд░рд╣реА рд╣реИ...";
  weatherModal.classList.remove('hidden');

  if ("geolocation" in navigator) {
    navigator.geolocation.getCurrentPosition(async (position) => {
      const lat = position.coords.latitude;
      const lon = position.coords.longitude;

      try {
        const apiKey = "mukUJUKYnnjzcLsHUARDOgZeLMo2hYsf";
        const url = `https://api.tomorrow.io/v4/weather/forecast?location=${lat},${lon}&apikey=${apiKey}`;

        const res = await fetch(url);
        const data = await res.json();
        const t = data.timelines?.daily?.[0]?.values;

        if (!t) {
          weatherText.textContent = "рдореМрд╕рдо рдбреЗрдЯрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред";
          return;
        }

        const avgTemp = t.temperatureAvg;
        const rainChance = t.precipitationProbabilityAvg;

        let cropAdvice = "";
        if (avgTemp >= 25 && rainChance >= 50) {
          cropAdvice = "ЁЯМ╛ рдзрд╛рди (Rice) рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╕рдордпред";
        } else if (avgTemp >= 18 && rainChance <= 30) {
          cropAdvice = "ЁЯМ┐ рдЧреЗрд╣реВрдВ рдпрд╛ рдЪрдирд╛ рдХреЗ рд▓рд┐рдП рдмреЗрд╣рддрд░ рдореМрд╕рдоред";
        } else {
          cropAdvice = "ЁЯзСтАНЁЯМ╛ рдореМрд╕рдо рдЕрдирд┐рд╢реНрдЪрд┐рдд рд╣реИ, рджреЗрдЦрднрд╛рд▓ рдХрд░реЗрдВред";
        }

        weatherText.innerHTML = `
          ЁЯУН рд╕реНрдерд┐рддрд┐: ${lat.toFixed(2)}, ${lon.toFixed(2)}<br><br>
          ЁЯМбя╕П рддрд╛рдкрдорд╛рди: <strong>${avgTemp}┬░C</strong><br>
          ЁЯМзя╕П рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛: <strong>${rainChance}%</strong><br><br>
          тЬЕ рд╕рд▓рд╛рд╣: <strong>${cropAdvice}</strong>
        `;
      } catch (error) {
        weatherText.textContent = "тЭМ рдореМрд╕рдо рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рдирд╣реАрдВ рд╣реЛ рд╕рдХрд╛ред";
      }
    }, () => {
      weatherText.textContent = "ЁЯУН рд╕реНрдерд╛рди рдЕрдиреБрдорддрд┐ рдЕрд╕реНрд╡реАрдХреГрдд!";
    });
  } else {
    weatherText.textContent = "тЭМ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рд╕реНрдерд╛рди рд╕рдорд░реНрдерди рдирд╣реАрдВ рдХрд░рддрд╛ред";
  }
});

weatherClose.addEventListener('click', () => {
  weatherModal.classList.add('hidden');
});
document.getElementById("speak-weather").addEventListener("click", () => {
  const weatherRawText = document.getElementById("weather-text").innerText || document.getElementById("weather-text").textContent;
  speakHindi(weatherRawText);
});





document.addEventListener('DOMContentLoaded', function () {
  const newsBtn = document.getElementById('news-btn');
  const newsModal = document.getElementById('news-modal');
  const newsClose = document.getElementById('news-close');
  const newsList = document.getElementById('news-list');
  const nextNews = document.getElementById('next-news');
  const prevNews = document.getElementById('prev-news');

  const agriNews = [
    "рдХреЗрдВрджреНрд░ рд╕рд░рдХрд╛рд░ рдиреЗ MSP рдореЗрдВ тВ╣200 рдХреА рд╡реГрджреНрдзрд┐ рдХреА рдШреЛрд╖рдгрд╛ рдХреАред",
    "рдЦрд░реАрдл рдлрд╕рд▓реЛрдВ рдХреА рдмреБрдЖрдИ 10% рдЕрдзрд┐рдХ рд╣реБрдИ рдЗрд╕ рд╡рд░реНрд╖ред",
    "рдмрд┐рд╣рд╛рд░ рдореЗрдВ рдкрд╣рд▓реА рдмрд╛рд░ рдбреНрд░реЛрди рд╕реЗ рдХреАрдЯрдирд╛рд╢рдХ рдЫрд┐рдбрд╝рдХрд╛рд╡ рд╢реБрд░реВред",
    "рдХрд░реНрдирд╛рдЯрдХ рдореЗрдВ рднрд╛рд░реА рдмрд╛рд░рд┐рд╢ рд╕реЗ рдкреНрдпрд╛рдЬ рдлрд╕рд▓ рдХреЛ рдиреБрдХрд╕рд╛рдиред",
    "ICAR рдиреЗ рдирдпрд╛ рд╣рд╛рдИ-рдкреНрд░реЛрдЯреАрди рдЧреЗрд╣реВрдВ рдХрд┐рд╕реНрдо рд▓реЙрдиреНрдЪ рдХрд┐рдпрд╛ред",
    "рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП 0% рдмреНрдпрд╛рдЬ рджрд░ рдкрд░ рдХреНрд░реЗрдбрд┐рдЯ рдХрд╛рд░реНрдб рдпреЛрдЬрдирд╛ред",
    "рдЧреБрдЬрд░рд╛рдд рдореЗрдВ рдСрд░реНрдЧреЗрдирд┐рдХ рдЦреЗрддреА рдХреЛ рдмрдврд╝рд╛рд╡рд╛ рдорд┐рд▓реЗрдЧрд╛ рд╕рдмреНрд╕рд┐рдбреА рд╕реЗред",
    "рд╕рднреА рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рд╕реЙрдпрд▓ рд╣реЗрд▓реНрде рдХрд╛рд░реНрдб рджреЗрдиреЗ рдХрд╛ рд▓рдХреНрд╖реНрдп рд░рдЦрд╛ред",
    "рднрд╛рд░рдд рд╕реЗ рдЖрдо рдХрд╛ рдирд┐рд░реНрдпрд╛рдд UAE рдХреЛ 15% рдмрдврд╝рд╛ред",
    "рдкрдВрдЬрд╛рдм рдореЗрдВ рдкрд╛рдиреА рдХреА рдХрдореА рд╕реЗ рдзрд╛рди рдХреА рдЦреЗрддреА рдореЗрдВ рдЧрд┐рд░рд╛рд╡рдЯред",
    "рдмрд╛рдпреЛ-рдлрд░реНрдЯрд┐рд▓рд╛рдЗрдЬрд╝рд░ рдкрд░ рдирдИ рд░рд┐рд╕рд░реНрдЪ рд░рд┐рдкреЛрд░реНрдЯ рдЬрд╛рд░реА рдХреАред",
    "рдореБрдлреНрдд рдмреАрдЬ рд╡рд┐рддрд░рдг рдХрд╛рд░реНрдпрдХреНрд░рдо рд╢реБрд░реВред",
    "AI рдЖрдзрд╛рд░рд┐рдд рдлрд╕рд▓ рдмреАрдорд╛ рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рд▓реЙрдиреНрдЪред",
    "рдЧреЗрд╣реВрдВ рдХреА рд░рд┐рдХреЙрд░реНрдб рдЙрддреНрдкрд╛рджрди рдХреА рдЙрдореНрдореАрджред",
    "рдлрд╕рд▓ рдХреИрд▓реЗрдВрдбрд░ рдРрдк рдЕрдм рд╣рд┐рдВрджреА рдореЗрдВ рднреА рдЙрдкрд▓рдмреНрдзред"
  ];

  let currentNewsIndex = 0;
  const pageSize = 3;

  function renderNews() {
    newsList.innerHTML = '';
    const visibleNews = agriNews.slice(currentNewsIndex, currentNewsIndex + pageSize);

    visibleNews.forEach((item, index) => {
      const div = document.createElement('div');
      div.className = 'news-card';
      div.innerHTML = `<strong>ЁЯУ░ рдЦрдмрд░ ${currentNewsIndex + index + 1}:</strong> ${item}`;
      newsList.appendChild(div);
    });

    prevNews.disabled = currentNewsIndex === 0;
    nextNews.disabled = currentNewsIndex + pageSize >= agriNews.length;
  }

  newsBtn.addEventListener('click', () => {
    currentNewsIndex = 0;
    renderNews();
    newsModal.classList.remove('hidden');
  });

  newsClose.addEventListener('click', () => {
    newsModal.classList.add('hidden');
  });

  nextNews.addEventListener('click', () => {
    if (currentNewsIndex + pageSize < agriNews.length) {
      currentNewsIndex += pageSize;
      renderNews();
    }
  });

  prevNews.addEventListener('click', () => {
    if (currentNewsIndex - pageSize >= 0) {
      currentNewsIndex -= pageSize;
      renderNews();
    }
  });
});



// ЁЯЖХ Mandi Modal Logic
const mandiBtn = document.getElementById('mandi-btn');
const mandiModal = document.getElementById('mandi-modal');
const mandiClose = document.getElementById('mandi-close');
const mandiList = document.getElementById('mandi-list');
const mandiNext = document.getElementById('mandi-next');
const mandiPrev = document.getElementById('mandi-prev');

let mandiPage = 1;

async function loadMandiData(page) {
  try {
    const res = await fetch(`http://34.227.143.202/api/mandi?page=${page}`);
    const result = await res.json();

    mandiList.innerHTML = '';
    result.data.forEach((item, index) => {
      const div = document.createElement('div');
      div.innerHTML = `ЁЯМ╛ <strong>${item.crop}</strong> (${item.state}) - тВ╣${item.rate}/рдХреНрд╡рд┐рдВрдЯрд▓`;
      mandiList.appendChild(div);
    });

    mandiPrev.disabled = page === 1;
    mandiNext.disabled = page >= result.total_pages;
  } catch (err) {
    mandiList.innerHTML = "тЭМ рдбреЗрдЯрд╛ рд▓реЛрдб рдирд╣реАрдВ рд╣реБрдЖред";
  }
}

mandiBtn.addEventListener('click', () => {
  mandiModal.classList.remove('hidden');
  mandiPage = 1;
  loadMandiData(mandiPage);
});

mandiClose.addEventListener('click', () => {
  mandiModal.classList.add('hidden');
});

mandiNext.addEventListener('click', () => {
  mandiPage++;
  loadMandiData(mandiPage);
});

mandiPrev.addEventListener('click', () => {
  if (mandiPage > 1) {
    mandiPage--;
    loadMandiData(mandiPage);
  }
});




document.addEventListener('DOMContentLoaded', () => {
  const calendarBtn = document.getElementById('calendar-btn');
  const calendarModal = document.getElementById('calendar-modal');
  const closeCalendar = document.getElementById('close-calendar');
  const calendarState = document.getElementById('calendar-state');
  const calendarMonth = document.getElementById('calendar-month');
  const calendarSearch = document.getElementById('calendar-search');
  const calendarResults = document.getElementById('calendar-results');
  const speakCalendar = document.getElementById('speak-calendar');

  calendarBtn.addEventListener('click', () => {
    calendarModal.classList.remove('hidden');
    calendarResults.innerHTML = '<p>рд░рд╛рдЬреНрдп рдФрд░ рдорд╛рд╣ рдЪреБрдиреЗрдВ рдФрд░ рдЦреЛрдЬреЗрдВред</p>';
  });

  closeCalendar.addEventListener('click', () => {
    calendarModal.classList.add('hidden');
  });

  calendarSearch.addEventListener('click', async () => {
    const state = calendarState.value;
    const month = calendarMonth.value;

    if (!state) {
      calendarResults.innerHTML = '<p class="error">тЪая╕П рдХреГрдкрдпрд╛ рд░рд╛рдЬреНрдп рдЪреБрдиреЗрдВ</p>';
      return;
    }

    calendarResults.innerHTML = '<div class="loader"></div>';

    try {
      const res = await fetch(`http://34.227.143.202/api/farming-calendar?state=${state}&month=${month}`);
      const data = await res.json();

      if (!data.data || data.data.length === 0) {
        calendarResults.innerHTML = '<p>рдХреЛрдИ рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВред</p>';
        return;
      }

      let html = '';
      data.data.forEach(item => {
        const monthName = getHindiMonth(item.month);
        html += `
          <div class="calendar-card">
            <h4>${monthName}</h4>
            <p><strong>ЁЯМ╛ рдлрд╕рд▓реЗрдВ:</strong> ${item.crops}</p>
            <p><strong>ЁЯФз рдЧрддрд┐рд╡рд┐рдзрд┐рдпрд╛рдБ:</strong> ${item.activities}</p>
            <p><strong>тЪая╕П рд╕рд╛рд╡рдзрд╛рдирд┐рдпрд╛рдБ:</strong> ${item.precautions}</p>
          </div>
        `;
      });

      calendarResults.innerHTML = html;
    } catch (err) {
      calendarResults.innerHTML = '<p class="error">тЭМ рд╕рд░реНрд╡рд░ рд╕рдорд╕реНрдпрд╛</p>';
    }
  });

  speakCalendar.addEventListener('click', () => {
    const cards = document.querySelectorAll('.calendar-card');
    let speech = '';
    cards.forEach(card => speech += card.textContent + 'ред ');
    speakHindi(speech || 'рдХреЛрдИ рдбреЗрдЯрд╛ рдирд╣реАрдВ рдорд┐рд▓рд╛');
  });

  function getHindiMonth(num) {
    const names = ['рдЬрдирд╡рд░реА','рдлрд░рд╡рд░реА','рдорд╛рд░реНрдЪ','рдЕрдкреНрд░реИрд▓','рдордИ','рдЬреВрди','рдЬреБрд▓рд╛рдИ','рдЕрдЧрд╕реНрдд','рд╕рд┐рддрдВрдмрд░','рдЕрдХреНрдЯреВрдмрд░','рдирд╡рдВрдмрд░','рджрд┐рд╕рдВрдмрд░'];
    return names[num - 1] || num;
  }

  function speakHindi(text) {
    if ('speechSynthesis' in window) {
      const msg = new SpeechSynthesisUtterance(text);
      msg.lang = 'hi-IN';
      speechSynthesis.cancel();
      speechSynthesis.speak(msg);
    }
  }
});



// ЁЯМ╛ Fertilizer Calculator Logic
document.addEventListener('DOMContentLoaded', function () {
  const fertBtn = document.getElementById('fertilizer-btn');
  const fertModal = document.getElementById('fertilizer-modal');
  const fertClose = document.getElementById('fertilizer-close');
  const fertCalcBtn = document.getElementById('fertilizer-calculate');
  const fertResult = document.getElementById('fertilizer-result');

  // Open modal
  fertBtn.addEventListener('click', () => {
    fertResult.innerHTML = "";
    fertModal.classList.remove('hidden');
  });

  // Close modal
  fertClose.addEventListener('click', () => {
    fertModal.classList.add('hidden');
  });

  // Calculate Fertilizer
  fertCalcBtn.addEventListener('click', async () => {
    const crop = document.getElementById('fertilizer-crop').value.trim().toLowerCase();
    const area = parseFloat(document.getElementById('fertilizer-area').value);
    const unit = document.getElementById('fertilizer-unit').value;

    if (!crop || isNaN(area) || area <= 0) {
      fertResult.innerHTML = "тЪая╕П рдХреГрдкрдпрд╛ рд╕рднреА рдлрд╝реАрд▓реНрдб рд╕рд╣реА рд╕реЗ рднрд░реЗрдВред";
      return;
    }

    try {
      const res = await fetch(`http://34.227.143.202/api/fertilizer?crop=${crop}&area=${area}&unit=${unit}`);
      const data = await res.json();

      if (data.error) {
        fertResult.innerHTML = `тЭМ ${data.error}`;
      } else {
        fertResult.innerHTML = `
          тЬЕ <strong>${data.crop}</strong> рдХреЗ рд▓рд┐рдП <strong>${data.area_in_hectare} рд╣реЗрдХреНрдЯреЗрдпрд░</strong> рдореЗрдВ:
          <ul>
            <li>ЁЯТК рдпреВрд░рд┐рдпрд╛: <strong>${data.urea_kg} kg</strong></li>
            <li>ЁЯМ┐ DAP: <strong>${data.dap_kg} kg</strong></li>
            <li>ЁЯзВ рдкреЛрдЯрд╛рд╢: <strong>${data.potash_kg} kg</strong></li>
          </ul>
        `;
      }
    } catch (err) {
      fertResult.innerHTML = "тЭМ рд╕рд░реНрд╡рд░ рд╕реЗ рдбреЗрдЯрд╛ рдирд╣реАрдВ рдорд┐рд▓рд╛ред";
    }
  });
});




  const lockerBtn = document.getElementById("krishi-locker-btn");
  const lockerModal = document.getElementById("krishi-locker-modal");
  const lockerClose = document.getElementById("krishi-locker-close");
  const uploadBtn = document.getElementById("upload-btn");
  const fileInput = document.getElementById("file-upload");
  const fileList = document.getElementById("file-list");
  const uploadMsg = document.getElementById("upload-message");

  let uploadedFiles = [];

  // Open modal
  lockerBtn.addEventListener("click", () => {
    lockerModal.classList.remove("hidden");
  });

  // Close modal
  lockerClose.addEventListener("click", () => {
    lockerModal.classList.add("hidden");
  });

  // Upload files to memory
  uploadBtn.addEventListener("click", () => {
    const files = Array.from(fileInput.files);

    if (files.length === 0) {
      uploadMsg.textContent = "рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рдХреБрдЫ рдлрд╝рд╛рдЗрд▓реЗрдВ рдЪреБрдиреЗрдВред";
      uploadMsg.style.color = "red";
      return;
    }

    uploadedFiles.push(...files);
    displayFiles();

    uploadMsg.textContent = `${files.length} рдлрд╝рд╛рдЗрд▓реЗрдВ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЕрдкрд▓реЛрдб рд╣реЛ рдЧрдИрдВ!`;
    uploadMsg.style.color = "green";

    fileInput.value = "";
  });

  function displayFiles() {
    fileList.innerHTML = "";

    uploadedFiles.forEach((file, index) => {
      const li = document.createElement("li");

      const link = document.createElement("a");
      link.textContent = file.name;
      link.href = URL.createObjectURL(file);
      link.download = file.name;
      link.target = "_blank";

      const removeBtn = document.createElement("button");
      removeBtn.textContent = "тЭМ";
      removeBtn.onclick = () => {
        uploadedFiles.splice(index, 1);
        displayFiles();
      };

      li.appendChild(link);
      li.appendChild(removeBtn);
      fileList.appendChild(li);
    });
  }





  









    // тЬЕ Emergency Modal Toggle
document.addEventListener('DOMContentLoaded', function () {
  const emergencyBtn = document.getElementById('emergencyBtn');
  const emergencyModal = document.getElementById('emergency-modal');
  const closeEmergency = document.getElementById('close-emergency');

  // Show modal on click
  emergencyBtn.addEventListener('click', () => {
    emergencyModal.style.display = 'flex';
  });

  // Close modal on close button click
  closeEmergency.addEventListener('click', () => {
    emergencyModal.style.display = 'none';
  });

  // Optional: close modal when clicking outside the box
  emergencyModal.addEventListener('click', (e) => {
    if (e.target === emergencyModal) {
      emergencyModal.style.display = 'none';
    }
  });
});



  // Get elements
  const aboutBtn = document.getElementById("aboutBtn");
  const contactBtn = document.getElementById("contactBtn");
  const popupOverlay = document.getElementById("popupOverlay");
  const popupTitle = document.getElementById("popupTitle");
  const popupContent = document.getElementById("popupContent");
  const closePopup = document.getElementById("closePopup");

  // About Us button click
  aboutBtn.addEventListener("click", () => {
    popupTitle.innerText = "рд╣рдорд╛рд░реЗ рдмрд╛рд░реЗ рдореЗрдВ";
    popupContent.innerText = "AgriVaani рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП рдПрдХ рдбрд┐рдЬрд┐рдЯрд▓ рд╕рд╛рдереА рд╣реИ рдЬреЛ рдореМрд╕рдо, рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣ рдФрд░ рдордВрдбреА рднрд╛рд╡ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реИред";
    popupOverlay.style.display = "block";
  });

  // Contact Us button click
  contactBtn.addEventListener("click", () => {
    popupTitle.innerText = "рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ";
    popupContent.innerText = "ЁЯУз support@agrivaani.in\nЁЯУЮ +91-1234567890";
    popupOverlay.style.display = "block";
  });

  // Close popup on тЬЦ
  closePopup.addEventListener("click", () => {
    popupOverlay.style.display = "none";
  });

  // Optional: Close popup when clicking outside content
  window.addEventListener("click", (e) => {
    if (e.target === popupOverlay) {
      popupOverlay.style.display = "none";
    }
  });


